name: ðŸ¤– Auto PR

on:
  push:
    branches-ignore:
      - main
      - master
      - release
      - pre-release-*
  workflow_dispatch:

jobs:
  create-pr:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4.1.7
        with:
          fetch-depth: 0

      - name: Fetch Latest Node.js Version
        id: fetch_node_version
        run: |
          echo "Fetching the latest Node.js version..."
          NODE_VERSION=$(curl -s https://nodejs.org/dist/index.json | grep '"version"' | head -1 | awk -F'"' '{print $4}')
          echo "NODE_VERSION=$NODE_VERSION" >> $GITHUB_ENV
          echo "Latest Node.js version: $NODE_VERSION"

      - name: Install Latest nvm
        run: |
          echo "Installing the latest version of nvm..."
          LATEST_NVM_VERSION=$(curl -s https://api.github.com/repos/nvm-sh/nvm/releases/latest | grep -oE '"tag_name": "[^"]+"' | cut -d'"' -f4)
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/$LATEST_NVM_VERSION/install.sh | bash
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          nvm install $NODE_VERSION

      - name: Setup Python
        uses: actions/setup-python@v5.1.0
        with:
          python-version: "3.x"

      - name: Load Python cache
        uses: actions/cache@v4.0.2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-cache-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-cache-

      - name: Install Dependencies
        run: poetry install

      - name: Run Unit Tests
        run: poetry run pytest

      - name: Ensure Node.js and npm are installed
        run: make ensure-node

      - name: Ensure semantic-release is installed
        run: make ensure-semantic-release

      - name: Create or Update PR
        id: pr
        run: |
          SOURCE_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          PR_URL=$(gh pr list --head $SOURCE_BRANCH --json url --jq '.[0].url' || echo "")
          PR_TITLE=$(pr-title-generate)
          echo "PR_TITLE: $PR_TITLE"
          if [ "$SOURCE_BRANCH" = "release" ]; then
              BASE_BRANCH="main"
          elif [[ "$SOURCE_BRANCH" == pre-release-* ]]; then
              BASE_BRANCH="release"
          elif [[ "$SOURCE_BRANCH" == dev-* ]]; then
              BASE_BRANCH="pre-release"
          else
              BASE_BRANCH="release"
          fi
          if [ -z "$PR_URL" ]; then
              PR_URL=$(gh pr create --title "$PR_TITLE" --body "This PR was automatically generated by a GitHub Action" --base $BASE_BRANCH)
              echo "PR_URL: $PR_URL"
          fi
          PR_BODY=$(python3 .github/workflows/pr_body_gen.py $SOURCE_BRANCH $BASE_BRANCH)
          gh pr edit $PR_URL --title "$PR_TITLE" --body "$PR_BODY"
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_TITLE: ${{ env.PR_TITLE }}
        shell: /usr/bin/bash -e {0}

      - name: Run Semantic Release
        run: make release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
